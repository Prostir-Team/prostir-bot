//@ts-check

const sqlite3 = require("sqlite3").verbose();
const config = require("./../../../config.json");
const logger = require("./../../../logging");
const { SlashCommandBuilder, EmbedBuilder } = require("discord.js");
const { calculateLevel } = require("..");

function sortObjectByValue(obj) {
  const sortedEntries = Object.entries(obj)
      .sort((a, b) => b[1] - a[1]); // Sorting entries based on numeric values

  const sortedObj = {};
  for (const [key, value] of sortedEntries) {
      sortedObj[key] = value;
  }

  return sortedObj;
}

module.exports = {
  data: new SlashCommandBuilder()
    .setName("leaderboard")
    .setDescription("–ü–æ–∫–∞–∑—É—î —Ç–æ–ø 10 –ª—é–¥–µ–π –ø–æ –∫—ñ–ª—å–∫–æ—Å—Ç—ñ XP"),
  async execute(/** @type {import("discord.js").Interaction<import("discord.js").CacheType>}*/interaction) {
    if (!config.modules.level_system.enabled) {
      //@ts-ignore
      await interaction.reply({embeds: [
        new EmbedBuilder()
          .setColor("Red")
          .setTitle("–ü–æ–º–∏–ª–∫–∞")
          .setDescription("XP –º–æ–¥—É–ª—å –Ω–∞—Ä–∞–∑—ñ –≤–∏–º–∫–Ω–µ–Ω–∏–π :stop_sign:")
      ]});
      return;
    };

    const bot_db = new sqlite3.Database("bot.db");
    bot_db.all("SELECT * FROM levels_data", async (err, rows) => {
      if (err) {
        logger.error("DB", err);
        //@ts-ignore
        // await interaction.reply(":stop_sign: –í–∏–Ω–∏–∫–ª–∞ –ø—Ä–æ–±–ª–µ–º–∞ –ø—Ä–∏ –≤–∏–∫–æ–Ω–∞–Ω–Ω—ñ –∫–æ–º–∞–Ω–¥–∏.");
        await interaction.reply({embeds: [
          new EmbedBuilder()
            .setColor("Red")
            .setTitle("–ü–æ–º–∏–ª–∫–∞")
            .setDescription("–í–∏–Ω–∏–∫–ª–∞ –ø—Ä–æ–±–ª–µ–º–∞ –ø—Ä–∏ –≤–∏–∫–æ–Ω–∞–Ω–Ω—ñ –∫–æ–º–∞–Ω–¥–∏. :stop_sign:")
        ]});
        return;
      }

      if (!rows) {
        //@ts-ignore
        // await interaction.reply(":warning: –¢–∞–±–ª–∏—Ü—è –ª—ñ–¥–µ—Ä—ñ–≤ –ø—É—Å—Ç–∞.");
        await interaction.reply({embeds: [
          new EmbedBuilder()
            .setColor("Yellow")
            .setTitle("–£–≤–∞–≥–∞")
            .setDescription("–í–∏–Ω–∏–∫–ª–∞ –ø—Ä–æ–±–ª–µ–º–∞ –ø—Ä–∏ –≤–∏–∫–æ–Ω–∞–Ω–Ω—ñ –∫–æ–º–∞–Ω–¥–∏. :warning:")
        ]});
        return;
      }

      const leaderboard = {}
      for (const row in rows) {
        leaderboard[rows[row].uid] = rows[row].xp;
      }

      let message = "```ansi";

      let i = 1;
      
      for (const uid in sortObjectByValue(leaderboard)) {
        if (i > 10) break;
        const username = (await interaction.client.users.fetch(uid)).username;
        message = message.concat(`\n${i}. [2;33m[2;30m[2;37m[2;36m${username}[0m[2;37m[0m[2;30m[0m[2;33m[2;30m - [0m[2;33m${leaderboard[uid].toString()} XP[2;30m - [0m[2;33m[2;34mLVL ${calculateLevel(leaderboard[uid]).toString()}[0m[2;33m[0m[2;33m[0m`);
        i++;
      }
      message = message.concat("\n```");
      //@ts-ignore
      // await interaction.reply(message);
      await interaction.reply({embeds: [
        new EmbedBuilder()
          .setColor(0xd4c47c)
          .setTitle("–¢–∞–±–ª–∏—Ü—è –ª—ñ–¥–µ—Ä—ñ–≤")
          .setDescription(message)
      ]});
    })
  }
}